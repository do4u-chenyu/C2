#! env/python.exe
from os.path import split, splitext, getctime, join, exists, isfile, abspath
from os import chdir, getcwd
from subprocess import Popen, PIPE
import re
import sys
from typing import List
from subprocess import Popen


def read_paths(file_path: str) -> List[str]:
    with open(file_path) as f:
        ret = []
        for path in f.readlines():
            ret.append(path.strip())
        return ret


def ex_cmd(cmd: str, cwd=None):
    print(cmd)
    ret = Popen(cmd, cwd=cwd, shell=True, stdout=PIPE).communicate()
    return ret

def re_findall(pat, raw: str) -> str:
    rst = pat.findall(raw)
    return rst[0] if len(rst) != 0 else ""
         
def set_hookspath() -> None:
    print("设置hooks默认路径")
    msg, err = ex_cmd("git config --global core.safecrlf true")
    if err != None:
        print("git命令有误，请检查是否配置git环境变量")
        sys.exit(-2)
    msg, err = ex_cmd("git config --global core.safecrlf")
    if msg.decode("utf8").strip() == "true":
        print("设置成功")
    else:
        print("设置失败，请检查是否配置git环境变量")
        sys.exit(-2)

def set_safe_crlf() -> None:
    print("设置禁止混合换行符")
    msg, err = ex_cmd("git config --global core.safecrlf true")
    if err != None:
        print("git命令有误，请检查是否配置git环境变量")
        sys.exit(-3)
    msg, err = ex_cmd("git config --global core.safecrlf")
    if msg.decode("utf8").strip() == "true":
        print("设置成功")
    else:
        print("设置失败，请检查是否配置git环境变量")
        sys.exit(-3)

def set_auto_crlf() -> None:
    print("设置不自动转换crlf")
    msg, err = ex_cmd("git config --global core.autocrlf false")
    if err != None:
        print("git命令有误，请检查是否配置git环境变量")
        sys.exit(-3)
    msg, err = ex_cmd("git config --global core.autocrlf")
    if msg.decode("utf8").strip() == "false":
        print("设置成功")
    else:
        print("设置失败，请检查是否配置git环境变量")
        sys.exit(-3)
		

def compile(vs_path: str) -> None:
    sln_path = getcwd()
    # vs_path = r"E:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise"
    compile_cmd = r"Common7\Tools\VsDevCmd.bat & chdir /d {} & devenv Citta_T1.sln /Build 开发调试 /Project Citta_T1\C2.csproj".format(sln_path)
    info, err = ex_cmd(compile_cmd, vs_path)
    info = info.decode("gbk")
    pat_start_compile = re.compile(r"已启动生成")
    pat_succ_num = re.compile(r"生成: 成功 (\d) 个")
    pat_fail_num = re.compile(r"失败 (\d) 个")
    pat_new_num = re.compile(r"最新 (\d) 个")
    pat_skip_num = re.compile(r"跳过 (\d) 个")
    if err is None:
        print(info)
        succ_num = int(re_findall(pat_succ_num, info).strip())
        fail_num = int(re_findall(pat_fail_num, info).strip())
        new_num = int(re_findall(pat_new_num, info).strip())
        skip_num = int(re_findall(pat_skip_num, info).strip())
        if succ_num == 0 or fail_num != 0:
            sys.exit(-4)
    else:
        print(err.decode("gbk"))
        sys.exit(-5)

def main(file_path: str) -> None:
    set_safe_crlf()
    set_auto_crlf()
    if not exists(file_path):
        print("找不到文件：{}".format(abspath(file_path)))
        sys.exit(-1)
    vs_paths = read_paths(file_path)
    for path in vs_paths:
        if exists(path):
            compile(path)
            return
    exit(-5)



if __name__ == '__main__':
    file_path = "tools/git-hook-scripts/vs_path"
    print(abspath(file_path))
    main(file_path)